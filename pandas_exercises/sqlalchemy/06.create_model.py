# # 6. Write a Python program that creates an i) SQLAlchemy model named 'Item' and table name 'items' with fields:
# 'item_id', 'item_name', 'item_price', and 'item_quantity'. ii) Create a SQLAlchemy model 'Order' and table name
# 'orders' with fields: 'order_id', 'user_id', 'item_id', and 'order_quantity'. iii) SQLAlchemy model named 'User'
# and table name 'users' with fields: 'user_id', 'user_name', 'user_email'. Tables will be created under the database
# 'shop2.db' . Consider i) 'item_id' as a primary key of 'items' table. ii) 'user_id' as a primary key of 'users'
# table. iii) 'order_id' as a primary key of 'orders' table and 'item_id' and 'user_id' as two foreign keys. Insert
# some records in the 'items', 'users' and 'orders' tables.

from sqlalchemy import create_engine, Column, Integer, String, DECIMAL, ForeignKey
from sqlalchemy.orm import declarative_base, sessionmaker, relationship
from sqlalchemy.exc import IntegrityError
# Create a base class for declarative models
Base = declarative_base()
# Create a SQLite in-memory database. The echo=True parameter in create_engine is helpful for debugging as it logs all
# the SQL statements generated by SQLAlchemy.
engine = create_engine('sqlite:///shop2.db', echo=True)


class Item(Base):    # Define the Item model
    __tablename__ = 'items'

    item_id = Column(Integer, primary_key=True)
    item_name = Column(String, nullable=False)
    item_price = Column(DECIMAL(10, 2), nullable=False)
    item_quantity = Column(Integer, nullable=False)


class User(Base):    # Define the User model
    __tablename__ = 'users'

    user_id = Column(Integer, primary_key=True)
    user_name = Column(String, nullable=False)
    user_email = Column(String, nullable=False)


class Order(Base):   # Define the Order model
    __tablename__ = 'orders'

    order_id = Column(Integer, primary_key=True)
    user_id = Column(Integer, ForeignKey('users.user_id'), nullable=False)
    item_id = Column(Integer, ForeignKey('items.item_id'), nullable=False)
    order_quantity = Column(Integer, nullable=False)

    user = relationship("User")
    item = relationship("Item")


# Create the table in the database if they don't exist
Base.metadata.create_all(engine)
# Create a session to interact with the database
Session = sessionmaker(bind=engine)
session = Session()

# Add items and users to DB
users = [
    User(user_name='Dznpc Ucmrr', user_email='dznpc@example.com'),
    User(user_name='Anas Richa', user_email='anas@example.com'),
    User(user_name='Martin Elma', user_email='martin@example.com')
]

items = [
    Item(item_name='Pizza', item_price=15.82, item_quantity=100),
    Item(item_name='Burger', item_price=2.82, item_quantity=100),
    Item(item_name='Ramen', item_price=0.45, item_quantity=300)
]
# Add user and item to session first to ensure they have IDs assigned
try:
    session.add_all(users)
    session.add_all(items)
    session.commit()  # Commit to assign IDs
    print('Users and items added successfully!')
except IntegrityError as e:
    print(f"IntegrityError occurred: {e}")
    session.rollback()

# Now create the order using the correct foreign keys
orders = [
    Order(user_id=users[0].user_id, item_id=items[0].item_id, order_quantity=2),
    Order(user_id=users[0].user_id, item_id=items[2].item_id, order_quantity=10),
    Order(user_id=users[2].user_id, item_id=items[1].item_id, order_quantity=5)
]
# To handle the IntegrityError exception and avoid the error, use a try-except block
try:
    session.add_all(orders)
    session.commit()
    print('Orders added successfully!')
except IntegrityError as e:
    print(f"IntegrityError occurred: {e}")
    session.rollback()

# Close session
session.close()

